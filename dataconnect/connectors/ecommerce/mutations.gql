# ============================================================
# MUTATIONS - Utilisateurs
# ============================================================

# Créer un utilisateur après connexion Firebase Auth
mutation CreateUser(
  $firebaseUid: String!
  $email: String!
  $displayName: String
  $photoURL: String
) @auth(level: USER) {
  user_insert(
    data: {
      firebaseUid: $firebaseUid
      email: $email
      displayName: $displayName
      photoURL: $photoURL
    }
  )
}

# Mettre à jour un utilisateur
mutation UpdateUser(
  $firebaseUid: String!
  $displayName: String
  $photoURL: String
) @auth(level: USER) {
  user_update(
    key: { firebaseUid: $firebaseUid }
    data: {
      displayName: $displayName
      photoURL: $photoURL
      updatedAt: { expr: "request.time" }
    }
  )
}

# ============================================================
# MUTATIONS - Produits (Admin)
# ============================================================

# Créer un produit
mutation CreateProduct(
  $name: String!
  $slug: String!
  $description: String!
  $price: Float!
  $stock: Int!
  $imageUrl: String!
  $categoryId: UUID!
  $compareAtPrice: Float
  $images: [String!]
  $sku: String
) @auth(level: USER) {
  product_insert(
    data: {
      name: $name
      slug: $slug
      description: $description
      price: $price
      stock: $stock
      imageUrl: $imageUrl
      categoryId: $categoryId
      compareAtPrice: $compareAtPrice
      images: $images
      sku: $sku
    }
  )
}

# Mettre à jour un produit
mutation UpdateProduct(
  $id: UUID!
  $name: String
  $description: String
  $price: Float
  $stock: Int
  $status: ProductStatus
) @auth(level: USER) {
  product_update(
    key: { id: $id }
    data: {
      name: $name
      description: $description
      price: $price
      stock: $stock
      status: $status
      updatedAt: { expr: "request.time" }
    }
  )
}

# Supprimer un produit
mutation DeleteProduct($id: UUID!) @auth(level: USER) {
  product_delete(key: { id: $id })
}

# ============================================================
# MUTATIONS - Catégories (Admin)
# ============================================================

# Créer une catégorie
mutation CreateCategory(
  $name: String!
  $slug: String!
  $description: String
  $imageUrl: String
  $parentId: UUID
) @auth(level: USER) {
  category_insert(
    data: {
      name: $name
      slug: $slug
      description: $description
      imageUrl: $imageUrl
      parentId: $parentId
    }
  )
}

# Mettre à jour une catégorie
mutation UpdateCategory(
  $id: UUID!
  $name: String
  $description: String
  $imageUrl: String
) @auth(level: USER) {
  category_update(
    key: { id: $id }
    data: {
      name: $name
      description: $description
      imageUrl: $imageUrl
    }
  )
}

# ============================================================
# MUTATIONS - Panier
# ============================================================

# Ajouter au panier
mutation AddToCart(
  $userId: UUID!
  $productId: UUID!
  $quantity: Int!
) @auth(level: USER) {
  cartItem_insert(
    data: {
      userId: $userId
      productId: $productId
      quantity: $quantity
    }
  )
}

# Mettre à jour la quantité dans le panier
mutation UpdateCartItemQuantity(
  $id: UUID!
  $quantity: Int!
) @auth(level: USER) {
  cartItem_update(
    key: { id: $id }
    data: {
      quantity: $quantity
      updatedAt: { expr: "request.time" }
    }
  )
}

# Supprimer du panier
mutation RemoveFromCart($id: UUID!) @auth(level: USER) {
  cartItem_delete(key: { id: $id })
}

# Vider le panier
mutation ClearCart($userId: UUID!) @auth(level: USER) {
  cartItem_deleteMany(where: { userId: { eq: $userId } })
}

# ============================================================
# MUTATIONS - Commandes
# ============================================================

# Créer une commande
mutation CreateOrder(
  $userId: UUID!
  $orderNumber: String!
  $subtotal: Float!
  $shippingCost: Float!
  $tax: Float!
  $total: Float!
  $shippingName: String!
  $shippingAddress: String!
  $shippingCity: String!
  $shippingPostalCode: String!
  $shippingCountry: String!
  $billingName: String!
  $billingAddress: String!
  $billingCity: String!
  $billingPostalCode: String!
  $billingCountry: String!
  $paymentMethod: String!
  $paymentStatus: String!
) @auth(level: USER) {
  order_insert(
    data: {
      userId: $userId
      orderNumber: $orderNumber
      subtotal: $subtotal
      shippingCost: $shippingCost
      tax: $tax
      total: $total
      shippingName: $shippingName
      shippingAddress: $shippingAddress
      shippingCity: $shippingCity
      shippingPostalCode: $shippingPostalCode
      shippingCountry: $shippingCountry
      billingName: $billingName
      billingAddress: $billingAddress
      billingCity: $billingCity
      billingPostalCode: $billingPostalCode
      billingCountry: $billingCountry
      paymentMethod: $paymentMethod
      paymentStatus: $paymentStatus
    }
  )
}

# Ajouter un article à une commande
mutation AddOrderItem(
  $orderId: UUID!
  $productId: UUID!
  $quantity: Int!
  $priceAtTime: Float!
  $subtotal: Float!
) @auth(level: USER) {
  orderItem_insert(
    data: {
      orderId: $orderId
      productId: $productId
      quantity: $quantity
      priceAtTime: $priceAtTime
      subtotal: $subtotal
    }
  )
}

# Mettre à jour le statut d'une commande
mutation UpdateOrderStatus(
  $id: UUID!
  $status: OrderStatus!
) @auth(level: USER) {
  order_update(
    key: { id: $id }
    data: {
      status: $status
      updatedAt: { expr: "request.time" }
    }
  )
}

# ============================================================
# MUTATIONS - Reviews
# ============================================================

# Créer un avis
mutation CreateReview(
  $productId: UUID!
  $userId: UUID!
  $rating: Int!
  $title: String
  $comment: String!
) @auth(level: USER) {
  review_insert(
    data: {
      productId: $productId
      userId: $userId
      rating: $rating
      title: $title
      comment: $comment
    }
  )
}

# Mettre à jour un avis
mutation UpdateReview(
  $id: UUID!
  $rating: Int
  $title: String
  $comment: String
) @auth(level: USER) {
  review_update(
    key: { id: $id }
    data: {
      rating: $rating
      title: $title
      comment: $comment
      updatedAt: { expr: "request.time" }
    }
  )
}

# Vérifier un avis (admin)
mutation VerifyReview($id: UUID!) @auth(level: USER) {
  review_update(
    key: { id: $id }
    data: { verified: true }
  )
}

# Supprimer un avis
mutation DeleteReview($id: UUID!) @auth(level: USER) {
  review_delete(key: { id: $id })
}
