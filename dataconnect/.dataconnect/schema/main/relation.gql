extend type CartItem {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "CartItem", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `CartItem` table.
  """
  _count: Int! @fdc_generated(from: "CartItem.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CartItem` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CartItem.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CartItem` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CartItem.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CartItem` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CartItem.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CartItem` table where the `quantity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  quantity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CartItem.quantity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CartItem` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CartItem.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CartItem` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CartItem.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `quantity` field in the `CartItem` table.
  """
  quantity_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CartItem.quantity", purpose: QUERY_SUM)
  """
  ✨ Average the `quantity` field in the `CartItem` table.
  """
  quantity_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CartItem.quantity", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `CartItem` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "CartItem.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `quantity` field in the `CartItem` table.
  """
  quantity_min: Int @fdc_generated(from: "CartItem.quantity", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `CartItem` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "CartItem.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `CartItem` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "CartItem.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `quantity` field in the `CartItem` table.
  """
  quantity_max: Int @fdc_generated(from: "CartItem.quantity", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `CartItem` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "CartItem.updatedAt", purpose: QUERY_MAX)
}
extend type Category {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Category", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Category` table.
  """
  _count: Int! @fdc_generated(from: "Category.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `parentId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  parentId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.parentId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `slug` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  slug_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.slug", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Category` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Category.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Category` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Category.createdAt", purpose: QUERY_MAX)
}
extend type Order {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Order", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Order` table.
  """
  _count: Int! @fdc_generated(from: "Order.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `billingAddress` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  billingAddress_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.billingAddress", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `billingCity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  billingCity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.billingCity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `billingCountry` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  billingCountry_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.billingCountry", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `billingName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  billingName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.billingName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `billingPostalCode` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  billingPostalCode_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.billingPostalCode", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `orderNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  orderNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.orderNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `paymentMethod` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  paymentMethod_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.paymentMethod", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `paymentStatus` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  paymentStatus_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.paymentStatus", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `shippingAddress` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingAddress_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.shippingAddress", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `shippingCity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingCity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.shippingCity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `shippingCost` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingCost_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.shippingCost", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `shippingCountry` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingCountry_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.shippingCountry", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `shippingName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.shippingName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `shippingPostalCode` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingPostalCode_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.shippingPostalCode", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `subtotal` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subtotal_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.subtotal", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `tax` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  tax_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.tax", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `total` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  total_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.total", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Order` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Order.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `shippingCost` field in the `Order` table.
  """
  shippingCost_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.shippingCost", purpose: QUERY_SUM)
  """
  ✨ Sum the `subtotal` field in the `Order` table.
  """
  subtotal_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.subtotal", purpose: QUERY_SUM)
  """
  ✨ Sum the `tax` field in the `Order` table.
  """
  tax_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.tax", purpose: QUERY_SUM)
  """
  ✨ Sum the `total` field in the `Order` table.
  """
  total_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.total", purpose: QUERY_SUM)
  """
  ✨ Average the `shippingCost` field in the `Order` table.
  """
  shippingCost_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.shippingCost", purpose: QUERY_AVG)
  """
  ✨ Average the `subtotal` field in the `Order` table.
  """
  subtotal_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.subtotal", purpose: QUERY_AVG)
  """
  ✨ Average the `tax` field in the `Order` table.
  """
  tax_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.tax", purpose: QUERY_AVG)
  """
  ✨ Average the `total` field in the `Order` table.
  """
  total_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Order.total", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Order` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Order.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `shippingCost` field in the `Order` table.
  """
  shippingCost_min: Float @fdc_generated(from: "Order.shippingCost", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `subtotal` field in the `Order` table.
  """
  subtotal_min: Float @fdc_generated(from: "Order.subtotal", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `tax` field in the `Order` table.
  """
  tax_min: Float @fdc_generated(from: "Order.tax", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `total` field in the `Order` table.
  """
  total_min: Float @fdc_generated(from: "Order.total", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Order` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Order.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Order` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Order.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `shippingCost` field in the `Order` table.
  """
  shippingCost_max: Float @fdc_generated(from: "Order.shippingCost", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `subtotal` field in the `Order` table.
  """
  subtotal_max: Float @fdc_generated(from: "Order.subtotal", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `tax` field in the `Order` table.
  """
  tax_max: Float @fdc_generated(from: "Order.tax", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `total` field in the `Order` table.
  """
  total_max: Float @fdc_generated(from: "Order.total", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Order` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Order.updatedAt", purpose: QUERY_MAX)
}
extend type OrderItem {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "OrderItem", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `OrderItem` table.
  """
  _count: Int! @fdc_generated(from: "OrderItem.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `orderId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  orderId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.orderId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `priceAtTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  priceAtTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.priceAtTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `quantity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  quantity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrderItem` table where the `subtotal` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subtotal_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrderItem.subtotal", purpose: QUERY_COUNT)
  """
  ✨ Sum the `priceAtTime` field in the `OrderItem` table.
  """
  priceAtTime_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.priceAtTime", purpose: QUERY_SUM)
  """
  ✨ Sum the `quantity` field in the `OrderItem` table.
  """
  quantity_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_SUM)
  """
  ✨ Sum the `subtotal` field in the `OrderItem` table.
  """
  subtotal_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.subtotal", purpose: QUERY_SUM)
  """
  ✨ Average the `priceAtTime` field in the `OrderItem` table.
  """
  priceAtTime_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.priceAtTime", purpose: QUERY_AVG)
  """
  ✨ Average the `quantity` field in the `OrderItem` table.
  """
  quantity_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_AVG)
  """
  ✨ Average the `subtotal` field in the `OrderItem` table.
  """
  subtotal_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrderItem.subtotal", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `priceAtTime` field in the `OrderItem` table.
  """
  priceAtTime_min: Float @fdc_generated(from: "OrderItem.priceAtTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `quantity` field in the `OrderItem` table.
  """
  quantity_min: Int @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `subtotal` field in the `OrderItem` table.
  """
  subtotal_min: Float @fdc_generated(from: "OrderItem.subtotal", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `priceAtTime` field in the `OrderItem` table.
  """
  priceAtTime_max: Float @fdc_generated(from: "OrderItem.priceAtTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `quantity` field in the `OrderItem` table.
  """
  quantity_max: Int @fdc_generated(from: "OrderItem.quantity", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `subtotal` field in the `OrderItem` table.
  """
  subtotal_max: Float @fdc_generated(from: "OrderItem.subtotal", purpose: QUERY_MAX)
}
extend type Product {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Product", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Product` table.
  """
  _count: Int! @fdc_generated(from: "Product.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `categoryId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  categoryId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.categoryId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `compareAtPrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  compareAtPrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.compareAtPrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `dimensions` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  dimensions_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.dimensions", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `price` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  price_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.price", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `sku` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  sku_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.sku", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `slug` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  slug_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.slug", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `stock` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  stock_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.stock", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `weight` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  weight_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.weight", purpose: QUERY_COUNT)
  """
  ✨ Sum the `compareAtPrice` field in the `Product` table.
  """
  compareAtPrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.compareAtPrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `price` field in the `Product` table.
  """
  price_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.price", purpose: QUERY_SUM)
  """
  ✨ Sum the `stock` field in the `Product` table.
  """
  stock_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Product.stock", purpose: QUERY_SUM)
  """
  ✨ Sum the `weight` field in the `Product` table.
  """
  weight_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.weight", purpose: QUERY_SUM)
  """
  ✨ Average the `compareAtPrice` field in the `Product` table.
  """
  compareAtPrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.compareAtPrice", purpose: QUERY_AVG)
  """
  ✨ Average the `price` field in the `Product` table.
  """
  price_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.price", purpose: QUERY_AVG)
  """
  ✨ Average the `stock` field in the `Product` table.
  """
  stock_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.stock", purpose: QUERY_AVG)
  """
  ✨ Average the `weight` field in the `Product` table.
  """
  weight_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.weight", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `compareAtPrice` field in the `Product` table.
  """
  compareAtPrice_min: Float @fdc_generated(from: "Product.compareAtPrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Product` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Product.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `price` field in the `Product` table.
  """
  price_min: Float @fdc_generated(from: "Product.price", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `stock` field in the `Product` table.
  """
  stock_min: Int @fdc_generated(from: "Product.stock", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Product` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Product.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `weight` field in the `Product` table.
  """
  weight_min: Float @fdc_generated(from: "Product.weight", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `compareAtPrice` field in the `Product` table.
  """
  compareAtPrice_max: Float @fdc_generated(from: "Product.compareAtPrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Product` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Product.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `price` field in the `Product` table.
  """
  price_max: Float @fdc_generated(from: "Product.price", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `stock` field in the `Product` table.
  """
  stock_max: Int @fdc_generated(from: "Product.stock", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Product` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Product.updatedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `weight` field in the `Product` table.
  """
  weight_max: Float @fdc_generated(from: "Product.weight", purpose: QUERY_MAX)
}
extend type Review {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Review", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Review` table.
  """
  _count: Int! @fdc_generated(from: "Review.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `comment` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  comment_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.comment", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `productId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.productId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.rating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.title", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.userId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `verified` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  verified_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.verified", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `Review` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Review.rating", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `Review` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Review.rating", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Review` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Review.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `rating` field in the `Review` table.
  """
  rating_min: Int @fdc_generated(from: "Review.rating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Review` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Review.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Review` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Review.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `rating` field in the `Review` table.
  """
  rating_max: Int @fdc_generated(from: "Review.rating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Review` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Review.updatedAt", purpose: QUERY_MAX)
}
extend type User {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `firebaseUid` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  firebaseUid_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.firebaseUid", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `photoURL` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  photoURL_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.photoURL", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.role", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `User` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "User.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `User` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "User.updatedAt", purpose: QUERY_MAX)
}
