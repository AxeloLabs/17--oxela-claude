#!/bin/bash

rm -rf /tmp/titanic-health-XXXXXX.log    

# Titanic Health Check - Firebase Cloud Audit
# Generated by Gemini based on specification

# [Phase 0 : Initialisation]
# [Phase 1 : Config Firebase]
# [Phase 1.5 : Git]
# [Phase 2 : Build]
# [Phase 3 : Tests]
# [Phase 4 : Emulators]
# [Phase 5 : Deploy]
# [Phase 6 : GÃ©nÃ©ration HTML]

# TODO

# ==============================================================================
# ðŸš¢ TITANIC HEALTH CHECK
#
# A comprehensive health check script for Turborepo/Firebase projects.
# This script audits configuration, Git status, builds, tests, emulators,
# and deployment readiness, generating an interactive HTML report.
#
# Version: 1.0.0
# Author: Gemini Code Assist
# ==============================================================================

# ---
# Script Configuration and Robustness
# ---
# set -e: Exit immediately if a command exits with a non-zero status.
# set -u: Treat unset variables as an error when substituting.
# set -o pipefail: The return value of a pipeline is the status of the last
#                  command to exit with a non-zero status, or zero if no
#                  command exited with a non-zero status.
set -euo pipefail

# ---
# Global Variables
# ---
# Timestamps
TIMESTAMP_START_ISO=""
TIMESTAMP_START_SECONDS=""

# Status
OVERALL_STATUS="OK" # Can be OK, WARNING, CRITICAL

# Paths
PROJECT_ROOT=""
REPORTS_DIR=""
LOG_FILE=""

# Data files for results
RESULTS_DIR=""
CONFIG_RESULTS_FILE=""

# ---
# Helper Functions
# ---

# Logging function
# Usage: log_msg "INFO" "This is an info message"
log_msg() {
    local type=$1
    local message=$2
    local timestamp
    timestamp=$(date +"%Y-%m-%d %H:%M:%S")    
    if [ -z "$LOG_FILE" ]; then
        echo "[$timestamp] [$type] [NO LOG FILE] $message"
    fi
    echo "[$timestamp] [$type] $message" | tee -a "$LOG_FILE"
}

# Function to find the project root
# It searches upwards from the current directory for a `turbo.json` file.
find_project_root() {
    local dir
    dir="$PWD"
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/turbo.json" ]; then
            echo "$dir"
            return
        fi
        dir=$(dirname "$dir")
    done
    echo "" # Not found
}

# Cleanup function to be called on script exit
cleanup() {
    # Safely remove the temporary results directory if it exists
    if [ -n "${RESULTS_DIR:-}" ] && [ -d "$RESULTS_DIR" ]; then
        rm -rf "$RESULTS_DIR"
    fi
}

# ---
# PHASE 0: INITIALIZATION
# ---
initialize() {
    TIMESTAMP_START_ISO=$(date +"%Y-%m-%dT%H:%M:%S%z")
    TIMESTAMP_START_SECONDS=$(date +%s)

    log_msg "INFO" "PHASE 0: Initializing Health Check..."

    PROJECT_ROOT=$(find_project_root)
    if [ -z "$PROJECT_ROOT" ]; then
        log_msg "CRITICAL" "Could not find project root (turbo.json). Please run from within the project."
        exit 1
    fi
    log_msg "INFO" "Project root detected: $PROJECT_ROOT"
    cd "$PROJECT_ROOT"

    # Create reports and results directory
    REPORTS_DIR="$PROJECT_ROOT/apps/admin/reports"
    mkdir -p "$REPORTS_DIR"
    log_msg "INFO" "Reports will be saved in: $REPORTS_DIR"

    RESULTS_DIR=$(mktemp -d)
    log_msg "INFO" "Intermediate results will be stored in: $RESULTS_DIR"
    CONFIG_RESULTS_FILE="$RESULTS_DIR/config_results.json"
    echo "[]" > "$CONFIG_RESULTS_FILE" # Initialize as empty JSON array
}

# ---
# PHASE 1: FIREBASE CONFIGURATION
# ---

# 1.1: Detect configuration files
detect_config_files() {
    log_msg "INFO" "PHASE 1.1: Detecting Firebase configuration files..."

    local files_to_check=(
        "firebase.json"
        ".firebaserc"
        "firestore.rules"
        "firestore.indexes.json"
        "storage.rules"
        "database.rules.json"
    )

    # Find files in root
    for file in "${files_to_check[@]}"; do
        find . -maxdepth 1 -name "$file"
    done

    # Find env files and framework configs in apps
    find ./apps -maxdepth 2 \( -name ".env*" -o -name "next.config.js" -o -name "vite.config.js" -o -name "firebase-config.ts" -o -name "firebaseConfig.js" \) -type f

    # Find firebase-related files in packages
    find ./packages -name "*firebase*" -type f

}

main() {
    echo "========================================"
    echo "ðŸš¢ TITANIC HEALTH CHECK"
    echo "   Firebase Cloud Audit Tool"
    echo "========================================"
    echo ""

    # Set trap at the very beginning of the main script execution
    trap cleanup EXIT INT TERM
    
    # Use mktemp to create a secure temporary log file
    LOG_FILE=$(mktemp /tmp/titanic-health-XXXXXX.log)
    if [ -z "$LOG_FILE" ] || [ ! -f "$LOG_FILE" ]; then
        echo "[FATAL] Could not create temporary log file. Exiting."
        exit 1
    fi

    initialize

    echo ""
    log_msg "INFO" "PHASE 1: Auditing Firebase Configuration"
    
    # The output of this function will be processed to generate the report table
    detected_files=$(detect_config_files)
    log_msg "INFO" "Detected potential configuration files:\n$detected_files"

    # ... The rest of the phases will be implemented here ...

    log_msg "INFO" "Health check script started successfully."
}

main "$@"